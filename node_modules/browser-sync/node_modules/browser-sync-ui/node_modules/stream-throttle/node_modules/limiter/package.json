{
  "name": "limiter",
  "description": "A generic rate limiter for node.js. Useful for API clients, web crawling, or other tasks that need to be throttled",
  "version": "1.0.5",
  "author": {
    "name": "John Hurliman",
    "email": "jhurliman@cull.tv"
  },
  "dependencies": {},
  "devDependencies": {
    "assert": "0.4.9",
    "vows": "0.6.3"
  },
  "keywords": [
    "rate",
    "limiting",
    "throttling"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jhurliman/node-rate-limiter"
  },
  "bugs": {
    "url": "http://github.com/jhurliman/node-rate-limiter/issues"
  },
  "directories": {
    "lib": "./lib/"
  },
  "main": "./index.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/jhurliman/node-rate-limiter/raw/master/LICENSE.txt"
    }
  ],
  "readme": "\n# limiter #\n\nProvides a generic rate limiter for node.js. Useful for API clients, web \ncrawling, or other tasks that need to be throttled. Two classes are exposed, \nRateLimiter and TokenBucket. TokenBucket provides a lower level interface to \nrate limiting with a configurable burst rate and drip rate. RateLimiter sits \non top of the token bucket and adds a restriction on the maximum number of \ntokens that can be removed each interval to comply with common API \nrestrictions like \"150 requests per hour maximum\".\n\n## Installation ##\n\nUse NPM to install:\n\n    npm install limiter\n\n## Usage ##\n\nA simple example allowing 150 requests per hour:\n\n```javascript\nvar RateLimiter = require('limiter').RateLimiter;\n// Allow 150 requests per hour (the Twitter search limit). Also understands\n// 'second', 'minute', 'day', or a number of milliseconds\nvar limiter = new RateLimiter(150, 'hour');\n\n// Throttle requests\nlimiter.removeTokens(1, function(err, remainingRequests) {\n  // err will only be set if we request more than the maximum number of\n  // requests we set in the constructor\n  \n  // remainingRequests tells us how many additional requests could be sent\n  // right this moment\n  \n  callMyRequestSendingFunction(...);\n});\n```\n\nAnother example allowing one message to be sent every 250ms:\n\n```javascript\nvar RateLimiter = require('limiter').RateLimiter;\nvar limiter = new RateLimiter(1, 250);\n\nlimiter.removeTokens(1, function() {\n  callMyMessageSendingFunction(...);\n});\n```\n\nThe default behaviour is to wait for the duration of the rate limiting\nthatâ€™s currently in effect before the callback is fired, but if you \npass in ```true``` as the third parameter, the callback will be fired \nimmediately with remainingRequests set to -1:\n\n```javascript\nvar RateLimiter = require('limiter').RateLimiter;\nvar limiter = new RateLimiter(150, 'hour', true);  // fire CB immediately\n\n// Immediately send 429 header to client when rate limiting is in effect\nlimiter.removeTokens(1, function(err, remainingRequests) {\n  if (remainingRequests < 0) {\n    response.writeHead(429, {'Content-Type': 'text/plain;charset=UTF-8'});\n    response.end('429 Too Many Requests - your IP is being rate limited');\n  } else {\n    callMyMessageSendingFunction(...);\n  }\n});\n```\n\nA synchronous method, tryRemoveTokens(), is available in both RateLimiter and TokenBucket. This will return immediately with a boolean value indicating if the token removal was successful.\n```javascript\nvar RateLimiter = require('limiter').RateLimiter;\nvar limiter = new RateLimiter(10, 'second');\n\nif (limiter.tryRemoveTokens(5))\n  console.log('Tokens removed');\nelse\n  console.log('No tokens removed');\n```\n\nTo get the number of remaining tokens **outside** the `removeTokens`-callback\nsimply use the `getTokensRemaining`-method.\n```javascript\nvar RateLimiter = require('limiter').RateLimiter;\nvar limiter = new RateLimiter(1, 250);\n\n// returns 1 since we did not remove a token and our number of tokens per interval is 1\nlimiter.getTokensRemaining();\n```\n\nUsing the token bucket directly to throttle at the byte level:\n\n```javascript\nvar BURST_RATE = 1024 * 1024 * 150; // 150KB/sec burst rate\nvar FILL_RATE = 1024 * 1024 * 50; // 50KB/sec sustained rate\nvar TokenBucket = require('limiter').TokenBucket;\n// We could also pass a parent token bucket in as the last parameter to\n// create a hierarchical token bucket\nvar bucket = new TokenBucket(BURST_RATE, FILL_RATE, 'second', null);\n\nbucket.removeTokens(myData.byteLength, function() {\n  sendMyData(myData);\n});\n```\n\n## Additional Notes ##\n\nBoth the token bucket and rate limiter should be used with a message queue or \nsome way of preventing multiple simultaneous calls to removeTokens(). \nOtherwise, earlier messages may get held up for long periods of time if more \nrecent messages are continually draining the token bucket. This can lead to \nout of order messages or the appearance of \"lost\" messages under heavy load.\n\n## License ##\n\n(The MIT License)\n\nCopyright (c) 2013 John Hurliman. &lt;jhurliman@jhurliman.org&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "limiter@1.0.5",
  "dist": {
    "shasum": "1c8ebf03be61561bb4c968d64fbea18d36f299fe"
  },
  "_from": "limiter@^1.0.5",
  "_resolved": "https://registry.npmjs.org/limiter/-/limiter-1.0.5.tgz"
}
