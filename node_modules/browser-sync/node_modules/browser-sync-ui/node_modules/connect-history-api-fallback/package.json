{
  "name": "connect-history-api-fallback",
  "version": "0.0.5",
  "description": "Provides a fallback for non-existing directories so that the HTML 5 history API can be used.",
  "keyswords": [
    "connect",
    "html5",
    "history api",
    "fallback",
    "spa"
  ],
  "engines": {
    "node": ">=0.8"
  },
  "main": "lib/index.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bripkens/connect-history-api-fallback.git"
  },
  "author": {
    "name": "Ben Ripkens",
    "email": "bripkens.dev@gmail.com",
    "url": "http://bripkens.de"
  },
  "license": "MIT",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "readme": "# history-api-fallback [![Build Status](https://secure.travis-ci.org/bripkens/connect-history-api-fallback.png?branch=master)](http://travis-ci.org/bripkens/connect-history-api-fallback)\n\nSingle page applications typically only have one file that is directly\naccessible by web browsers: The `index.html`. Navigation in the application\nis then commonly handled using JavaScript with the help of the\n[HTML 5 history API](http://www.w3.org/html/wg/drafts/html/master/single-page.html#the-history-interface).\nThis results in issues when the user hits the refresh button or is directly\naccessing a page other than the landing page, e.g. `/impress` or\n`/bripkens/history-api-fallback`, as the web server is then trying to retrieve\na file which is existing at this location. As your application is a SPA, the\nweb server will fail trying to retrieve the file and return a *404 - Not Found*\nmessage to the user.\n\nThis tiny middleware addresses some of the issues. Specifically, it will change\nthe requested location to `index.html` whenever there is a request which\nfulfils the following criteria:\n\n 1. The request is a GET request\n 2. which accepts `text/html` and\n 3. is not a direct file request, i.e. the requested path does not contain a\n    `.` (DOT) character.\n\n## Usage\n\nThe middleware is available through NPM and can easily be added.\n\n```\nnpm install --save connect-history-api-fallback\n```\n\nNow you only need to add the middleware to your application like so\n\n```\nvar connect = require('connect');\nvar historyApiFallback = require('connect-history-api-fallback');\n\nvar app = connect()\n  .use(historyApiFallback)\n  .listen(3000);\n```\n\nOf course you can also use this piece of middleware with express:\n\n```\nvar express = require('express');\nvar historyApiFallback = require('connect-history-api-fallback');\n\nvar app = express();\napp.use(historyApiFallback);\n```\n\nActivate logging of rewrite reasons:\n\n```\nvar historyApiFallback = require('connect-history-api-fallback');\nhistoryApiFallback.setLogger(console.log.bind(console));\n\nvar app = express();\napp.use(historyApiFallback);\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bripkens/connect-history-api-fallback/issues"
  },
  "_id": "connect-history-api-fallback@0.0.5",
  "dist": {
    "shasum": "f0ffd011d6a7c4f7658ec56fea2e988410488e83"
  },
  "_from": "connect-history-api-fallback@0.0.5",
  "_resolved": "https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-0.0.5.tgz"
}
