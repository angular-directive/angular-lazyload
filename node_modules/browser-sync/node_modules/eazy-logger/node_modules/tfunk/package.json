{
  "name": "tfunk",
  "version": "3.0.1",
  "description": "Multi-colour console output from chalk with added awesome",
  "repository": {
    "type": "git",
    "url": "git://github.com/shakyShane/tfunk"
  },
  "keywords": [
    "color",
    "colour",
    "colors",
    "terminal",
    "console",
    "cli",
    "string",
    "styles",
    "formatting",
    "rgb",
    "shell",
    "xterm",
    "log",
    "logging",
    "command-line",
    "text"
  ],
  "files": [
    "index.js",
    "lib"
  ],
  "scripts": {
    "lint": "jshint test/*.js index.js",
    "test": "npm run lint && mocha"
  },
  "author": {
    "name": "Shane Osbourne"
  },
  "license": "MIT",
  "dependencies": {
    "chalk": "^0.5.1",
    "object-path": "^0.9.0"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "readme": "##tfunk [![Build Status](https://travis-ci.org/shakyShane/tfunk.svg)](https://travis-ci.org/shakyShane/tfunk)\n\nMulti-colour console output from [Chalk](https://github.com/sindresorhus/chalk#styles) with added awesome.\n\nby [@shakyshane](https://github.com/shakyShane) & [@AydinHassan](https://github.com/AydinHassan)\n\n![tfunk](http://f.cl.ly/items/15102k441h1U1Z1l253J/Screen%20Shot%202014-09-10%20at%2022.05.15.png)\n\n##Install\n\n```bash\nnpm install tfunk\n```\n\n##Usage\n\n**Syntax rules:**\n\n`{` `<color>` `:` `YOUR STRING` `}`\n\n**Example**\n\n`{blue:This is a blue line}`\n\n**`}` is optional**\n\n`{blue:This is a blue line` <- Perfectly valid \n\n\n##Usage\n```js\nvar tFunk = require(\"tfunk\");\n\nconsole.log( tfunk(\"{cyan:tFunk terminal colours\") )\n\n// => tFunk terminal colours\n```\n\nOr get a custom compiler with a set prefix:\n\n```js\nvar compiler = require(\"tfunk\").Compiler({\n    prefix: \"[{magenta:tFunk}]\"\n});\n\nconsole.log( compiler.compile(\"tFunk is awesome\") );\nconsole.log( compiler.compile(\"don't you think?\") );\n\n// => [tFunk] tFunk is awesome\n// => [tFunk] don't you think?\n```\n\n**Define your own syntax**\n\nYou can define your own methods, they receive the string section as the first parameter & have access to the compiler\nthrough `this.compile()` keyword.\n\n```js\nvar compiler = require(\"tfunk\").Compiler({\n    \"warn\": function(string) {\n        return this.compile(\"{red:WARNING:\" + string);\n    }\n});\n```\n\nNow you can use `warn` anywhere you like.\n\n```js\nconsole.log( compiler.compile(\"{warn: Could not file your config file...\") );\n\n// => WARNING: Could not file your config file...\n```\n\n##Examples\n\nHere are some comparisons to chalk, to help you understand how to use tFunk.\n\n###Single Colours\n\n```js\n// chalk\nconsole.log( chalk.red(\"This has a single colour\") );\n\n// tFunk\nconsole.log( tFunk(\"{red:This has a single colour\") );\n```\n\n###Single Colour mid string\n\n```js\n// chalk\nconsole.log( \"This has a single colour \" + chalk.cyan(\"that begins mid-string\") );\n\n// tFunck\nconsole.log( tFunk(\"This has a single colour {cyan:that begins mid-string\") );\n```\n\n###Single Colour with end point\n\n```js\n// chalk\nconsole.log( chalk.red(\"This has a single colour with \") + \"an endpoint\");\n\n// tFunk\nconsole.log( tFunk(\"{red:This has a single colour with }an endpoint\") );\n```\n\n###Two Colours\n\n```js\n// chalk\nconsole.log( chalk.green(\"This has \") + chalk.cyan(\"two colours\") );\n\n// tFunk\nconsole.log( tFunk(\"{green:This has {cyan:two colours\") );\n```\n\n###Nested Colours\n\n```js\n// chalk\nconsole.log( chalk.green(\"This has a colour \" + chalk.cyan(\"nested inside\") + \" another colour\") );\n\n//tFunk\nconsole.log( tFunk(\"{green:This has a colour {cyan:nested inside} another colour\") );\n```\n\n###Multiple Nested\n\n```js\n// chalk\nconsole.log( chalk.blue(\"Multiple \" + chalk.cyan(\"NESTED\") + \" styles in \" + chalk.red(\"the same string\") + \" with an ending\") );\n\n// tFunk\nconsole.log( tFunk(\"{blue:Multiple {cyan:NESTED} styles in {red:the same string} with an ending\") );\n```\n\n###Multi line\n```js\nvar multiline = require(\"multiline\");\n\nvar string = multiline(function () {/*\n{cyan:This is a multi-line coloured string\nWith a single {yellow:yellow} word in the center of a line\nPretty cool huh?\n*/});\n\nconsole.log( tFunk(string) );\n```\n\n###Escaping when you need curly braces\n```js\nconsole.log( tFunk(\"This has a \\\\{\\\\{mustache\\\\}\\\\}\") );\n```\n\n\n##TODO\n- [x] Colours\n- [x] Nested Colours\n- [x] Custom syntax\n- [x] Prefixed compiler\n- [x] Make the chain-able API work like this `\"{white.bgRed: White text, red BG\"`\n- [x] Offer a way of escaping. Right now, ALL instances of `}` will be lost\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/shakyShane/tfunk/issues"
  },
  "_id": "tfunk@3.0.1",
  "_from": "tfunk@^3.0.1"
}
